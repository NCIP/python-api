#L
# Copyright SAIC
#
# Distributed under the OSI-approved BSD 3-Clause License.
# See http://ncip.github.com/python-api/LICENSE.txt for details.
#L

##################################################
# file: EVSWSQueryService_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /usr/bin/cacore2py
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# urn:security.evs.nci.nih.gov
##############################

class ns3:
    targetNamespace = "urn:security.evs.nci.nih.gov"

    class SecurityToken_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:security.evs.nci.nih.gov"
        type = (schema, "SecurityToken")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.SecurityToken_Def.schema
            TClist = [ZSI.TC.String(pname="accessToken", aname="_accessToken", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="userName", aname="_userName", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._accessToken = None
                    self._password = None
                    self._userName = None
                    return
            Holder.__name__ = "SecurityToken_Holder"
            self.pyclass = Holder

# end class ns3 (tns: urn:security.evs.nci.nih.gov)

##############################
# targetNamespace
# http://xml.apache.org/xml-soap
##############################

class ns1:
    targetNamespace = "http://xml.apache.org/xml-soap"

    class Vector_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://xml.apache.org/xml-soap"
        type = (schema, "Vector")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.Vector_Def.schema
            TClist = [ZSI.TC.AnyType(pname="item", aname="_item", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._item = []
                    return
            Holder.__name__ = "Vector_Holder"
            self.pyclass = Holder

# end class ns1 (tns: http://xml.apache.org/xml-soap)

##############################
# targetNamespace
# urn:domain.evs.nci.nih.gov
##############################

class ns2:
    targetNamespace = "urn:domain.evs.nci.nih.gov"

    class MetaThesaurusConcept_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:domain.evs.nci.nih.gov"
        type = (schema, "MetaThesaurusConcept")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.MetaThesaurusConcept_Def.schema
            TClist = [GTD("http://webservice.system.nci.nih.gov","ArrayOf_xsd_anyType",lazy=True)(pname="atomCollection", aname="_atomCollection", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cui", aname="_cui", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://webservice.system.nci.nih.gov","ArrayOf_xsd_anyType",lazy=True)(pname="definitionCollection", aname="_definitionCollection", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://webservice.system.nci.nih.gov","ArrayOf_xsd_anyType",lazy=True)(pname="semanticTypeCollection", aname="_semanticTypeCollection", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://webservice.system.nci.nih.gov","ArrayOf_xsd_anyType",lazy=True)(pname="sourceCollection", aname="_sourceCollection", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://webservice.system.nci.nih.gov","ArrayOf_xsd_anyType",lazy=True)(pname="synonymCollection", aname="_synonymCollection", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._atomCollection = None
                    self._cui = None
                    self._definitionCollection = None
                    self._name = None
                    self._semanticTypeCollection = None
                    self._sourceCollection = None
                    self._synonymCollection = None
                    return
            Holder.__name__ = "MetaThesaurusConcept_Holder"
            self.pyclass = Holder

    class EditActionDate_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:domain.evs.nci.nih.gov"
        type = (schema, "EditActionDate")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.EditActionDate_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="action", aname="_action", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="editDate", aname="_editDate", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._action = None
                    self._editDate = None
                    return
            Holder.__name__ = "EditActionDate_Holder"
            self.pyclass = Holder

    class History_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:domain.evs.nci.nih.gov"
        type = (schema, "History")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.History_Def.schema
            TClist = [ZSI.TC.String(pname="editAction", aname="_editAction", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="editActionDate", aname="_editActionDate", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="namespaceId", aname="_namespaceId", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="referenceCode", aname="_referenceCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._editAction = None
                    self._editActionDate = None
                    self._namespaceId = None
                    self._referenceCode = None
                    return
            Holder.__name__ = "History_Holder"
            self.pyclass = Holder

    class EdgeProperties_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:domain.evs.nci.nih.gov"
        type = (schema, "EdgeProperties")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.EdgeProperties_Def.schema
            TClist = [ZSI.TC.Boolean(pname="isA", aname="_isA", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://webservice.system.nci.nih.gov","ArrayOf_xsd_anyType",lazy=True)(pname="links", aname="_links", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="traverseDown", aname="_traverseDown", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._isA = None
                    self._links = None
                    self._name = None
                    self._traverseDown = None
                    return
            Holder.__name__ = "EdgeProperties_Holder"
            self.pyclass = Holder

    class HistoryRecord_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:domain.evs.nci.nih.gov"
        type = (schema, "HistoryRecord")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.HistoryRecord_Def.schema
            TClist = [ZSI.TC.String(pname="descLogicConceptCode", aname="_descLogicConceptCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://xml.apache.org/xml-soap","Vector",lazy=True)(pname="historyCollection", aname="_historyCollection", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._descLogicConceptCode = None
                    self._historyCollection = None
                    return
            Holder.__name__ = "HistoryRecord_Holder"
            self.pyclass = Holder

    class TreeNode_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:domain.evs.nci.nih.gov"
        type = (schema, "TreeNode")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.TreeNode_Def.schema
            TClist = [ZSI.TC.Boolean(pname="isA", aname="_isA", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://webservice.system.nci.nih.gov","ArrayOf_xsd_anyType",lazy=True)(pname="links", aname="_links", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="traverseDown", aname="_traverseDown", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._isA = None
                    self._links = None
                    self._name = None
                    self._traverseDown = None
                    return
            Holder.__name__ = "TreeNode_Holder"
            self.pyclass = Holder

    class Vocabulary_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:domain.evs.nci.nih.gov"
        type = (schema, "Vocabulary")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.Vocabulary_Def.schema
            TClist = [ZSI.TC.String(pname="description", aname="_description", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="namespaceId", aname="_namespaceId", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("urn:security.evs.nci.nih.gov","SecurityToken",lazy=True)(pname="securityToken", aname="_securityToken", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://xml.apache.org/xml-soap","Vector",lazy=True)(pname="siloCollection", aname="_siloCollection", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._name = None
                    self._namespaceId = None
                    self._securityToken = None
                    self._siloCollection = None
                    return
            Holder.__name__ = "Vocabulary_Holder"
            self.pyclass = Holder

    class DescLogicConcept_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:domain.evs.nci.nih.gov"
        type = (schema, "DescLogicConcept")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.DescLogicConcept_Def.schema
            TClist = [GTD("http://xml.apache.org/xml-soap","Vector",lazy=True)(pname="associationCollection", aname="_associationCollection", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="code", aname="_code", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("urn:domain.evs.nci.nih.gov","EdgeProperties",lazy=True)(pname="edgeProperties", aname="_edgeProperties", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="hasChildren", aname="_hasChildren", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="hasParents", aname="_hasParents", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("urn:domain.evs.nci.nih.gov","HistoryRecord",lazy=True)(pname="historyRecord", aname="_historyRecord", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://xml.apache.org/xml-soap","Vector",lazy=True)(pname="inverseAssociationCollection", aname="_inverseAssociationCollection", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://xml.apache.org/xml-soap","Vector",lazy=True)(pname="inverseRoleCollection", aname="_inverseRoleCollection", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="isRetired", aname="_isRetired", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="namespaceId", aname="_namespaceId", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://xml.apache.org/xml-soap","Vector",lazy=True)(pname="propertyCollection", aname="_propertyCollection", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://xml.apache.org/xml-soap","Vector",lazy=True)(pname="roleCollection", aname="_roleCollection", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://xml.apache.org/xml-soap","Vector",lazy=True)(pname="semanticTypeVector", aname="_semanticTypeVector", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("urn:domain.evs.nci.nih.gov","TreeNode",lazy=True)(pname="treeNode", aname="_treeNode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("urn:domain.evs.nci.nih.gov","Vocabulary",lazy=True)(pname="vocabulary", aname="_vocabulary", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._associationCollection = None
                    self._code = None
                    self._edgeProperties = None
                    self._hasChildren = None
                    self._hasParents = None
                    self._historyRecord = None
                    self._inverseAssociationCollection = None
                    self._inverseRoleCollection = None
                    self._isRetired = None
                    self._name = None
                    self._namespaceId = None
                    self._propertyCollection = None
                    self._roleCollection = None
                    self._semanticTypeVector = None
                    self._treeNode = None
                    self._vocabulary = None
                    return
            Holder.__name__ = "DescLogicConcept_Holder"
            self.pyclass = Holder

    class Source_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:domain.evs.nci.nih.gov"
        type = (schema, "Source")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.Source_Def.schema
            TClist = [ZSI.TC.String(pname="abbreviation", aname="_abbreviation", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="code", aname="_code", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._abbreviation = None
                    self._code = None
                    self._description = None
                    return
            Holder.__name__ = "Source_Holder"
            self.pyclass = Holder

    class Atom_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:domain.evs.nci.nih.gov"
        type = (schema, "Atom")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.Atom_Def.schema
            TClist = [ZSI.TC.String(pname="code", aname="_code", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="lui", aname="_lui", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="origin", aname="_origin", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("urn:domain.evs.nci.nih.gov","Source",lazy=True)(pname="source", aname="_source", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._code = None
                    self._lui = None
                    self._name = None
                    self._origin = None
                    self._source = None
                    return
            Holder.__name__ = "Atom_Holder"
            self.pyclass = Holder

    class Association_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:domain.evs.nci.nih.gov"
        type = (schema, "Association")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.Association_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://xml.apache.org/xml-soap","Vector",lazy=True)(pname="qualifierCollection", aname="_qualifierCollection", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._qualifierCollection = None
                    self._value = None
                    return
            Holder.__name__ = "Association_Holder"
            self.pyclass = Holder

    class AttributeSetDescriptor_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:domain.evs.nci.nih.gov"
        type = (schema, "AttributeSetDescriptor")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.AttributeSetDescriptor_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="WITH_ALL_ATTRIBUTES", aname="_WITH_ALL_ATTRIBUTES", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="WITH_ALL_PROPERTIES", aname="_WITH_ALL_PROPERTIES", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="WITH_ALL_ROLES", aname="_WITH_ALL_ROLES", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="WITH_NO_ATTRIBUTES", aname="_WITH_NO_ATTRIBUTES", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://xml.apache.org/xml-soap","Vector",lazy=True)(pname="propertyCollection", aname="_propertyCollection", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://xml.apache.org/xml-soap","Vector",lazy=True)(pname="roleCollection", aname="_roleCollection", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._WITH_ALL_ATTRIBUTES = None
                    self._WITH_ALL_PROPERTIES = None
                    self._WITH_ALL_ROLES = None
                    self._WITH_NO_ATTRIBUTES = None
                    self._name = None
                    self._propertyCollection = None
                    self._roleCollection = None
                    return
            Holder.__name__ = "AttributeSetDescriptor_Holder"
            self.pyclass = Holder

    class SemanticType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:domain.evs.nci.nih.gov"
        type = (schema, "SemanticType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.SemanticType_Def.schema
            TClist = [ZSI.TC.String(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._name = None
                    return
            Holder.__name__ = "SemanticType_Holder"
            self.pyclass = Holder

    class Silo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:domain.evs.nci.nih.gov"
        type = (schema, "Silo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.Silo_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._name = None
                    return
            Holder.__name__ = "Silo_Holder"
            self.pyclass = Holder

    class Definition_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:domain.evs.nci.nih.gov"
        type = (schema, "Definition")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.Definition_Def.schema
            TClist = [ZSI.TC.String(pname="definition", aname="_definition", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("urn:domain.evs.nci.nih.gov","Source",lazy=True)(pname="source", aname="_source", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._definition = None
                    self._source = None
                    return
            Holder.__name__ = "Definition_Holder"
            self.pyclass = Holder

    class Role_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:domain.evs.nci.nih.gov"
        type = (schema, "Role")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.Role_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._value = None
                    return
            Holder.__name__ = "Role_Holder"
            self.pyclass = Holder

    class Property_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:domain.evs.nci.nih.gov"
        type = (schema, "Property")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.Property_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://xml.apache.org/xml-soap","Vector",lazy=True)(pname="qualifierCollection", aname="_qualifierCollection", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._qualifierCollection = None
                    self._value = None
                    return
            Holder.__name__ = "Property_Holder"
            self.pyclass = Holder

    class Qualifier_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:domain.evs.nci.nih.gov"
        type = (schema, "Qualifier")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.Qualifier_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._value = None
                    return
            Holder.__name__ = "Qualifier_Holder"
            self.pyclass = Holder

# end class ns2 (tns: urn:domain.evs.nci.nih.gov)

##############################
# targetNamespace
# http://webservice.system.nci.nih.gov
##############################

class ns0:
    targetNamespace = "http://webservice.system.nci.nih.gov"

    class ArrayOf_xsd_anyType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://webservice.system.nci.nih.gov"
        type = (schema, "ArrayOf_xsd_anyType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOf_xsd_anyType_Def.schema
            TClist = [ZSI.TC.AnyType(pname="item", aname="_item", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._item = []
                    return
            Holder.__name__ = "ArrayOf_xsd_anyType_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://webservice.system.nci.nih.gov)
