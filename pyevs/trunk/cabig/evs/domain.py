# This API was generated by pyCaCORE
import cabig.evs.EVSWSQueryService_client as services
from cabig.cacore.ws.proxy import *

schema = services.ns2

class Association(WSBean):

    arrayType =  services.ns0.ArrayOf_xsd_anyType_Def(None).pyclass
    className = "gov.nih.nci.evs.domain.Association"

    name = ProxyAttr('name')
    value = ProxyAttr('value')
    qualifierCollection = ProxyAssoc('qualifierCollection',False)
    
    def __init__(self, holder=None, service=None, **kwargs):
        if not(holder): holder = schema.Association_Def(None).pyclass()
        WSBean.__init__(self, holder, service=service, **kwargs)
    
class Atom(WSBean):

    arrayType =  services.ns0.ArrayOf_xsd_anyType_Def(None).pyclass
    className = "gov.nih.nci.evs.domain.Atom"

    code = ProxyAttr('code')
    lui = ProxyAttr('lui')
    name = ProxyAttr('name')
    origin = ProxyAttr('origin')
    source = ProxyAssoc('source',False)
    
    def __init__(self, holder=None, service=None, **kwargs):
        if not(holder): holder = schema.Atom_Def(None).pyclass()
        WSBean.__init__(self, holder, service=service, **kwargs)
    
class AttributeSetDescriptor(WSBean):

    arrayType =  services.ns0.ArrayOf_xsd_anyType_Def(None).pyclass
    className = "gov.nih.nci.evs.domain.AttributeSetDescriptor"

    WITH_ALL_ATTRIBUTES = ProxyAttr('WITH_ALL_ATTRIBUTES')
    WITH_ALL_PROPERTIES = ProxyAttr('WITH_ALL_PROPERTIES')
    WITH_ALL_ROLES = ProxyAttr('WITH_ALL_ROLES')
    WITH_NO_ATTRIBUTES = ProxyAttr('WITH_NO_ATTRIBUTES')
    name = ProxyAttr('name')
    propertyCollection = ProxyAssoc('propertyCollection',False)
    roleCollection = ProxyAssoc('roleCollection',False)
    
    def __init__(self, holder=None, service=None, **kwargs):
        if not(holder): holder = schema.AttributeSetDescriptor_Def(None).pyclass()
        WSBean.__init__(self, holder, service=service, **kwargs)
    
class Definition(WSBean):

    arrayType =  services.ns0.ArrayOf_xsd_anyType_Def(None).pyclass
    className = "gov.nih.nci.evs.domain.Definition"

    definition = ProxyAttr('definition')
    source = ProxyAssoc('source',False)
    
    def __init__(self, holder=None, service=None, **kwargs):
        if not(holder): holder = schema.Definition_Def(None).pyclass()
        WSBean.__init__(self, holder, service=service, **kwargs)
    
class DescLogicConcept(WSBean):

    arrayType =  services.ns0.ArrayOf_xsd_anyType_Def(None).pyclass
    className = "gov.nih.nci.evs.domain.DescLogicConcept"

    code = ProxyAttr('code')
    hasChildren = ProxyAttr('hasChildren')
    hasParents = ProxyAttr('hasParents')
    isRetired = ProxyAttr('isRetired')
    name = ProxyAttr('name')
    namespaceId = ProxyAttr('namespaceId')
    associationCollection = ProxyAssoc('associationCollection',False)
    edgeProperties = ProxyAssoc('edgeProperties',False)
    historyRecord = ProxyAssoc('historyRecord',False)
    inverseAssociationCollection = ProxyAssoc('inverseAssociationCollection',False)
    inverseRoleCollection = ProxyAssoc('inverseRoleCollection',False)
    propertyCollection = ProxyAssoc('propertyCollection',False)
    roleCollection = ProxyAssoc('roleCollection',False)
    semanticTypeVector = ProxyAssoc('semanticTypeVector',False)
    treeNode = ProxyAssoc('treeNode',False)
    vocabulary = ProxyAssoc('vocabulary',False)
    
    def __init__(self, holder=None, service=None, **kwargs):
        if not(holder): holder = schema.DescLogicConcept_Def(None).pyclass()
        WSBean.__init__(self, holder, service=service, **kwargs)
    
class EdgeProperties(WSBean):

    arrayType =  services.ns0.ArrayOf_xsd_anyType_Def(None).pyclass
    className = "gov.nih.nci.evs.domain.EdgeProperties"

    isA = ProxyAttr('isA')
    name = ProxyAttr('name')
    traverseDown = ProxyAttr('traverseDown')
    links = ProxyAssoc('links',True)
    
    def __init__(self, holder=None, service=None, **kwargs):
        if not(holder): holder = schema.EdgeProperties_Def(None).pyclass()
        WSBean.__init__(self, holder, service=service, **kwargs)
    
class EditActionDate(WSBean):

    arrayType =  services.ns0.ArrayOf_xsd_anyType_Def(None).pyclass
    className = "gov.nih.nci.evs.domain.EditActionDate"

    action = ProxyAttr('action')
    editDate = ProxyAttr('editDate')
    
    def __init__(self, holder=None, service=None, **kwargs):
        if not(holder): holder = schema.EditActionDate_Def(None).pyclass()
        WSBean.__init__(self, holder, service=service, **kwargs)
    
class HistoryRecord(WSBean):

    arrayType =  services.ns0.ArrayOf_xsd_anyType_Def(None).pyclass
    className = "gov.nih.nci.evs.domain.HistoryRecord"

    descLogicConceptCode = ProxyAttr('descLogicConceptCode')
    historyCollection = ProxyAssoc('historyCollection',False)
    
    def __init__(self, holder=None, service=None, **kwargs):
        if not(holder): holder = schema.HistoryRecord_Def(None).pyclass()
        WSBean.__init__(self, holder, service=service, **kwargs)
    
class History(WSBean):

    arrayType =  services.ns0.ArrayOf_xsd_anyType_Def(None).pyclass
    className = "gov.nih.nci.evs.domain.History"

    editAction = ProxyAttr('editAction')
    editActionDate = ProxyAttr('editActionDate')
    namespaceId = ProxyAttr('namespaceId')
    referenceCode = ProxyAttr('referenceCode')
    
    def __init__(self, holder=None, service=None, **kwargs):
        if not(holder): holder = schema.History_Def(None).pyclass()
        WSBean.__init__(self, holder, service=service, **kwargs)
    
class MetaThesaurusConcept(WSBean):

    arrayType =  services.ns0.ArrayOf_xsd_anyType_Def(None).pyclass
    className = "gov.nih.nci.evs.domain.MetaThesaurusConcept"

    cui = ProxyAttr('cui')
    name = ProxyAttr('name')
    atomCollection = ProxyAssoc('atomCollection',True)
    definitionCollection = ProxyAssoc('definitionCollection',True)
    semanticTypeCollection = ProxyAssoc('semanticTypeCollection',True)
    sourceCollection = ProxyAssoc('sourceCollection',True)
    synonymCollection = ProxyAssoc('synonymCollection',True)
    
    def __init__(self, holder=None, service=None, **kwargs):
        if not(holder): holder = schema.MetaThesaurusConcept_Def(None).pyclass()
        WSBean.__init__(self, holder, service=service, **kwargs)
    
class Property(WSBean):

    arrayType =  services.ns0.ArrayOf_xsd_anyType_Def(None).pyclass
    className = "gov.nih.nci.evs.domain.Property"

    name = ProxyAttr('name')
    value = ProxyAttr('value')
    qualifierCollection = ProxyAssoc('qualifierCollection',False)
    
    def __init__(self, holder=None, service=None, **kwargs):
        if not(holder): holder = schema.Property_Def(None).pyclass()
        WSBean.__init__(self, holder, service=service, **kwargs)
    
class Qualifier(WSBean):

    arrayType =  services.ns0.ArrayOf_xsd_anyType_Def(None).pyclass
    className = "gov.nih.nci.evs.domain.Qualifier"

    name = ProxyAttr('name')
    value = ProxyAttr('value')
    
    def __init__(self, holder=None, service=None, **kwargs):
        if not(holder): holder = schema.Qualifier_Def(None).pyclass()
        WSBean.__init__(self, holder, service=service, **kwargs)
    
class Role(WSBean):

    arrayType =  services.ns0.ArrayOf_xsd_anyType_Def(None).pyclass
    className = "gov.nih.nci.evs.domain.Role"

    name = ProxyAttr('name')
    value = ProxyAttr('value')
    
    def __init__(self, holder=None, service=None, **kwargs):
        if not(holder): holder = schema.Role_Def(None).pyclass()
        WSBean.__init__(self, holder, service=service, **kwargs)
    
class SemanticType(WSBean):

    arrayType =  services.ns0.ArrayOf_xsd_anyType_Def(None).pyclass
    className = "gov.nih.nci.evs.domain.SemanticType"

    id = ProxyAttr('id')
    name = ProxyAttr('name')
    
    def __init__(self, holder=None, service=None, **kwargs):
        if not(holder): holder = schema.SemanticType_Def(None).pyclass()
        WSBean.__init__(self, holder, service=service, **kwargs)
    
class Silo(WSBean):

    arrayType =  services.ns0.ArrayOf_xsd_anyType_Def(None).pyclass
    className = "gov.nih.nci.evs.domain.Silo"

    id = ProxyAttr('id')
    name = ProxyAttr('name')
    
    def __init__(self, holder=None, service=None, **kwargs):
        if not(holder): holder = schema.Silo_Def(None).pyclass()
        WSBean.__init__(self, holder, service=service, **kwargs)
    
class Source(WSBean):

    arrayType =  services.ns0.ArrayOf_xsd_anyType_Def(None).pyclass
    className = "gov.nih.nci.evs.domain.Source"

    abbreviation = ProxyAttr('abbreviation')
    code = ProxyAttr('code')
    description = ProxyAttr('description')
    
    def __init__(self, holder=None, service=None, **kwargs):
        if not(holder): holder = schema.Source_Def(None).pyclass()
        WSBean.__init__(self, holder, service=service, **kwargs)
    
class TreeNode(WSBean):

    arrayType =  services.ns0.ArrayOf_xsd_anyType_Def(None).pyclass
    className = "gov.nih.nci.evs.domain.TreeNode"

    isA = ProxyAttr('isA')
    name = ProxyAttr('name')
    traverseDown = ProxyAttr('traverseDown')
    links = ProxyAssoc('links',True)
    
    def __init__(self, holder=None, service=None, **kwargs):
        if not(holder): holder = schema.TreeNode_Def(None).pyclass()
        WSBean.__init__(self, holder, service=service, **kwargs)
    
class Vocabulary(WSBean):

    arrayType =  services.ns0.ArrayOf_xsd_anyType_Def(None).pyclass
    className = "gov.nih.nci.evs.domain.Vocabulary"

    description = ProxyAttr('description')
    name = ProxyAttr('name')
    namespaceId = ProxyAttr('namespaceId')
    securityToken = ProxyAssoc('securityToken',False)
    siloCollection = ProxyAssoc('siloCollection',False)
    
    def __init__(self, holder=None, service=None, **kwargs):
        if not(holder): holder = schema.Vocabulary_Def(None).pyclass()
        WSBean.__init__(self, holder, service=service, **kwargs)
    
